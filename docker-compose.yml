
services:
  app:
    build: .
    image: python/media-lens:1.0
    container_name: media-lens
    ports:
      - "8080:8080"
    environment:
      - GIT_REPO_URL=${GIT_REPO_URL:-"https://github.com/ecodan/media-lens.git"}
      - GIT_BRANCH=${GIT_BRANCH:-"master"}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-medialens}
      - GCP_STORAGE_BUCKET=${GCP_STORAGE_BUCKET:-media-lens-storage}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - USE_CLOUD_STORAGE=${USE_CLOUD_STORAGE:-true}
      - USE_WORKLOAD_IDENTITY=${USE_WORKLOAD_IDENTITY:-false}
      # These variables have different defaults depending on environment:
      # - For cloud (production): Use workload identity, no storage emulator
      # - For local (development): Use storage emulator, explicit credentials
      - STORAGE_EMULATOR_HOST=${STORAGE_EMULATOR_HOST:-}
      - FTP_HOSTNAME=${FTP_HOSTNAME}
      - FTP_USERNAME=${FTP_USERNAME}
      - FTP_KEY_PATH=${FTP_KEY_PATH}
      - FTP_PORT=${FTP_PORT}
      - FTP_PASSPHRASE=${FTP_PASSPHRASE}
      - FTP_IP_FALLBACK=${FTP_IP_FALLBACK}
      - FTP_REMOTE_PATH=${FTP_REMOTE_PATH:-/var/www/html}
      # Path to service account credentials file, use VM environment variable with fallback
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-/app/keys/medialens-service-account.json}
    volumes:
      # Mount working directory for output files
      - ${WORKING_DIR:-./working}:/app/working
      # Mount the keys directory for credentials
      - ${KEYS_DIR:-./keys}:/app/keys:ro
      # Mount the VM's application default credentials for workload identity
      - /var/run/secrets/cloud.google.com:/var/run/secrets/cloud.google.com:ro
      # Alternative credential paths that might exist on VM
      - /var/google-cloud/auth:/var/google-cloud/auth:ro
      - /etc/google/auth:/etc/google/auth:ro
    # The container-startup.sh script will be used by default (defined in Dockerfile)
    # Only make app depend on storage when running locally with the storage emulator
    depends_on:
      storage:
        condition: service_started
        required: false
    profiles:
      # This service is always enabled
      - standard
      - cloud
      - local

  storage:
    image: oittaa/gcp-storage-emulator
    container_name: media-lens-storage
    ports:
      - "9023:9023"
    environment:
      - PORT=9023
    profiles: 
      # This service is only enabled for local development, not in cloud
      - local

volumes:
  app_data: